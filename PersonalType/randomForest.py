# -*- coding: utf-8 -*-
"""3KategoriliDeneme4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YWAz0E_zLJ0hhrqvPCjPjsnG92OBMhG6
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_distances
import bookAPİ as api


def randomForest(temp,rate,age):
    # Veri setini yükle
    if(age ==  'Yetişkin 18+'):
        df = pd.read_csv('books_with_categories.csv')
    else:
        df = pd.read_csv('filtrelenmis_dataset.csv')

    data = df.head(2000)
    data.head()

    # Gerekli sütunları seç
    features = ['categorie1','categorie2','categorie3','new_rating','author']

    target = 'title'  # Öneri yapılacak kitabın başlığı

    # Verileri bağımsız ve bağımlı değişkenlere ayırma
    X = data[features]
    y = data[target]

    data=pd.DataFrame(None)

    # Kategorik değişkenleri sayısal forma dönüştürmek için one-hot encoding uygulama
    X_encoded = pd.get_dummies(X)

    data.head()

    # Satır sayısını hesaplama
    # satir_sayisi = len(data)

    # Eğitim ve test veri setlerini oluştur
    X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

    # Random Forest modeli
    model = RandomForestClassifier()
    model.fit(X_train, y_train)


    # Tahmin yapmak için örnek bir kitap verisi oluştur
    #kitap = pd.DataFrame({'categorie1': ['categorie1_drama']})

    temp = [item.lower() for item in temp]

    if(age ==  'Çocuk 7-12'):
        kitap = pd.DataFrame({'categorie1': ['childrens'], 'categorie2': ['kids'],'categorie3': [temp[0]], 'new_rating': [rate]})
    else:
        kitap = pd.DataFrame({'categorie1': [temp[0]], 'categorie2': [temp[1]],'categorie3': [temp[2]], 'new_rating': [rate]})
    #  kitap = pd.DataFrame({'categorie1': ['classics'], 'categorie2': ['fantasy'],'categorie3': ['fiction'], 'new_rating': ['C']})


    # Veriyi sayısal forma dönüştürme
    kitap_encoded = pd.get_dummies(kitap)

    eğitim_sütunları = X_encoded.columns
    kitap_encoded = kitap_encoded.reindex(columns=eğitim_sütunları, fill_value=0)

    # Modeli kullanarak tahmin yapma
    tahmin = model.predict(kitap_encoded)
    # author = data.loc[data['title'] == tahmin[0], 'author'].iloc[0]

    author_prediction = df[df['title'] == tahmin[0]]['author'].values[0]


    book_desc = api.searchBook(tahmin[0],author_prediction)

    # Tahmin sonucunu ekrana yazdır
    if book_desc is None or book_desc['imageUrl'] == 'Resim bulunamadı':
        return randomForest(temp,rate,age)
    else:
        return book_desc

# from book_recommendation import BookRecommendation
# import bookAPİ as api

# def randomForest(temp,rate):
#     recommendation = BookRecommendation()
#     recommendation.load_model('model.pkl')
#     prediction = recommendation.predict_book(temp, rate)

#     book_desc = api.searchBook(prediction)

#     # Tahmin sonucunu ekrana yazdır
#     if book_desc is None or book_desc['imageUrl'] == 'Resim bulunamadı':
#         return randomForest(temp,rate)
#     else:
#         return book_desc
    