# -*- coding: utf-8 -*-
"""RandomForest2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zSrKtYDJ5gv1JPQs-9Lp-pShqOZHh94O
"""

import pandas as pd
import re
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import MultiLabelBinarizer
import bookAPİ as api

# from google.colab import files
# from google.colab import drive
# drive.mount('/content/drive')

def randomForestClassifier(temp):
  # Veri setini yükle
  #data = pd.read_csv('/content/drive/MyDrive/Bitirme Projesi/training.csv')
  data = pd.read_csv('ucKategorili.csv')

  # print(data.head())

  # Txt dosyasının adı ve yolu belirtildi
  dosya_yolu = "unique_words[1].txt"

  # Kategorileri tutacak boş bir liste oluşturuldu
  categories = []

  # Txt dosyasını okuyup, kategorileri categories listesine ekleme
  with open(dosya_yolu, "r") as dosya:
      satirlar = dosya.readlines()
      for satir in satirlar:
          # Satırı virgül ile ayırarak kategorilere bölme
          kategoriler = satir.split(",")
          # Her bir kategoriyi boşlukları temizleyerek categories listesine ekleme
          for kategori in kategoriler:
              categories.append(kategori.strip())

  # Sonucu kontrol edin
  # print(categories)

  def determine_category(genre):
      for category in categories:
          if category == genre:
              return category
      return "Other"

  data['category'] = data['genres'].apply(lambda x: determine_category(x))

  # Kategorileri sayısal değerlere dönüştürür
  vectorizer = CountVectorizer()
  X = vectorizer.fit_transform(data['category'])

  # Random Forest algoritması ile model eğitimi
  model = RandomForestClassifier()
  model.fit(X, data['category'])

  kitap_ismi = 'Othello'
  # temp = data[data['title'] == kitap_ismi]['genres']
  # temp = temp.to_string()

  # print(temp)
  templist= []
  start =0
  counter = 0
  while True:
    start=temp.find('\'',start)
    if start == -1:
      break
    if counter==3:
      break
    counter=counter+1
    end = temp.find('\'',start+1)
    templist.append(temp[start+1:end])
    start = end+1

  # print(templist)

  # print(templist[0])
  #print(determine_category(data[data['title'] == kitap_ismi]['genres'].values[0]))
  kitap_kategori = determine_category(templist[0])
  # print(kitap_kategori)
  #kitap_kategori = determine_category(data[data['title'] == kitap_ismi]['genres'].values)
  kitap_vektoru = vectorizer.transform([kitap_kategori])
  oneri = model.predict(kitap_vektoru)[0]

  benzer_kitap = data[data['category'] == oneri].sample()
  benzer_kitap_adi = benzer_kitap['title'].values[0]
  benzer_kitap_yazari = benzer_kitap['author'].values[0]

  book_desc = api.searchBook(benzer_kitap_adi,benzer_kitap_yazari)

  if book_desc is None:
    return randomForestClassifier(temp)
  else:
    # print(f"{benzer_kitap_adi} YAZAR:  {benzer_kitap_yazari} KATEGORİ {benzer_kitap['genres'].values}")
    return book_desc
  
# randomForestClassifier("['Classics', 'Plays', 'Fiction']")